/*
 * Created on 29 lug 2016 ( Time 14:37:00 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.mf.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "torneo"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="torneo", catalog="torneo" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="TorneoEntity.countAll", query="SELECT COUNT(x) FROM TorneoEntity x" )
} )
public class TorneoEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="descrizione", length=45)
    private String     descrizione  ;

    @Temporal(TemporalType.DATE)
    @Column(name="inizio", nullable=false)
    private Date       inizio       ;

    @Temporal(TemporalType.DATE)
    @Column(name="aperturaIscrizioni", nullable=false)
    private Date       aperturaiscrizioni ;

    @Temporal(TemporalType.DATE)
    @Column(name="chiusuraIscrizioni", nullable=false)
    private Date       chiusuraiscrizioni ;

    @Column(name="note")
    private String     note         ;

    @Column(name="luogo", length=45)
    private String     luogo        ;

	// "societamgrId" (column "societaMgr_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="societaMgr_id", referencedColumnName="id")
    private SocietaEntity societa     ;

    @OneToMany(mappedBy="torneo", targetEntity=CategorieacceptEntity.class)
    private List<CategorieacceptEntity> listOfCategorieaccept;

    @OneToMany(mappedBy="torneo", targetEntity=IscrizioniEntity.class)
    private List<IscrizioniEntity> listOfIscrizioni;

    @OneToMany(mappedBy="torneo", targetEntity=FriendEntity.class)
    private List<FriendEntity> listOfFriend;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public TorneoEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : descrizione ( VARCHAR ) 
    public void setDescrizione( String descrizione ) {
        this.descrizione = descrizione;
    }
    public String getDescrizione() {
        return this.descrizione;
    }

    //--- DATABASE MAPPING : inizio ( DATE ) 
    public void setInizio( Date inizio ) {
        this.inizio = inizio;
    }
    public Date getInizio() {
        return this.inizio;
    }

    //--- DATABASE MAPPING : aperturaIscrizioni ( DATE ) 
    public void setAperturaiscrizioni( Date aperturaiscrizioni ) {
        this.aperturaiscrizioni = aperturaiscrizioni;
    }
    public Date getAperturaiscrizioni() {
        return this.aperturaiscrizioni;
    }

    //--- DATABASE MAPPING : chiusuraIscrizioni ( DATE ) 
    public void setChiusuraiscrizioni( Date chiusuraiscrizioni ) {
        this.chiusuraiscrizioni = chiusuraiscrizioni;
    }
    public Date getChiusuraiscrizioni() {
        return this.chiusuraiscrizioni;
    }

    //--- DATABASE MAPPING : note ( LONGTEXT ) 
    public void setNote( String note ) {
        this.note = note;
    }
    public String getNote() {
        return this.note;
    }

    //--- DATABASE MAPPING : luogo ( VARCHAR ) 
    public void setLuogo( String luogo ) {
        this.luogo = luogo;
    }
    public String getLuogo() {
        return this.luogo;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setSocieta( SocietaEntity societa ) {
        this.societa = societa;
    }
    public SocietaEntity getSocieta() {
        return this.societa;
    }

    public void setListOfCategorieaccept( List<CategorieacceptEntity> listOfCategorieaccept ) {
        this.listOfCategorieaccept = listOfCategorieaccept;
    }
    public List<CategorieacceptEntity> getListOfCategorieaccept() {
        return this.listOfCategorieaccept;
    }

    public void setListOfIscrizioni( List<IscrizioniEntity> listOfIscrizioni ) {
        this.listOfIscrizioni = listOfIscrizioni;
    }
    public List<IscrizioniEntity> getListOfIscrizioni() {
        return this.listOfIscrizioni;
    }

    public void setListOfFriend( List<FriendEntity> listOfFriend ) {
        this.listOfFriend = listOfFriend;
    }
    public List<FriendEntity> getListOfFriend() {
        return this.listOfFriend;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(descrizione);
        sb.append("|");
        sb.append(inizio);
        sb.append("|");
        sb.append(aperturaiscrizioni);
        sb.append("|");
        sb.append(chiusuraiscrizioni);
        // attribute 'note' not usable (type = String Long Text)
        sb.append("|");
        sb.append(luogo);
        return sb.toString(); 
    } 

}

/*
 * Created on 22 lug 2016 ( Time 17:15:33 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.mf.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.mf.bean.Categorie;
import org.mf.bean.jpa.CategorieEntity;
import org.mf.business.service.mapping.CategorieServiceMapper;
import org.mf.data.repository.jpa.CategorieJpaRepository;
import org.mf.test.CategorieFactoryForTest;
import org.mf.test.CategorieEntityFactoryForTest;
import org.mf.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CategorieService
 */
@RunWith(MockitoJUnitRunner.class)
public class CategorieServiceImplTest {

	@InjectMocks
	private CategorieServiceImpl categorieService;
	@Mock
	private CategorieJpaRepository categorieJpaRepository;
	@Mock
	private CategorieServiceMapper categorieServiceMapper;
	
	private CategorieFactoryForTest categorieFactoryForTest = new CategorieFactoryForTest();

	private CategorieEntityFactoryForTest categorieEntityFactoryForTest = new CategorieEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		CategorieEntity categorieEntity = categorieJpaRepository.findOne(id);
		
		Categorie categorie = categorieFactoryForTest.newCategorie();
		when(categorieServiceMapper.mapCategorieEntityToCategorie(categorieEntity)).thenReturn(categorie);

		// When
		Categorie categorieFound = categorieService.findById(id);

		// Then
		assertEquals(categorie.getId(),categorieFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<CategorieEntity> categorieEntitys = new ArrayList<CategorieEntity>();
		CategorieEntity categorieEntity1 = categorieEntityFactoryForTest.newCategorieEntity();
		categorieEntitys.add(categorieEntity1);
		CategorieEntity categorieEntity2 = categorieEntityFactoryForTest.newCategorieEntity();
		categorieEntitys.add(categorieEntity2);
		when(categorieJpaRepository.findAll()).thenReturn(categorieEntitys);
		
		Categorie categorie1 = categorieFactoryForTest.newCategorie();
		when(categorieServiceMapper.mapCategorieEntityToCategorie(categorieEntity1)).thenReturn(categorie1);
		Categorie categorie2 = categorieFactoryForTest.newCategorie();
		when(categorieServiceMapper.mapCategorieEntityToCategorie(categorieEntity2)).thenReturn(categorie2);

		// When
		List<Categorie> categoriesFounds = categorieService.findAll();

		// Then
		assertTrue(categorie1 == categoriesFounds.get(0));
		assertTrue(categorie2 == categoriesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Categorie categorie = categorieFactoryForTest.newCategorie();

		CategorieEntity categorieEntity = categorieEntityFactoryForTest.newCategorieEntity();
		when(categorieJpaRepository.findOne(categorie.getId())).thenReturn(null);
		
		categorieEntity = new CategorieEntity();
		categorieServiceMapper.mapCategorieToCategorieEntity(categorie, categorieEntity);
		CategorieEntity categorieEntitySaved = categorieJpaRepository.save(categorieEntity);
		
		Categorie categorieSaved = categorieFactoryForTest.newCategorie();
		when(categorieServiceMapper.mapCategorieEntityToCategorie(categorieEntitySaved)).thenReturn(categorieSaved);

		// When
		Categorie categorieResult = categorieService.create(categorie);

		// Then
		assertTrue(categorieResult == categorieSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Categorie categorie = categorieFactoryForTest.newCategorie();

		CategorieEntity categorieEntity = categorieEntityFactoryForTest.newCategorieEntity();
		when(categorieJpaRepository.findOne(categorie.getId())).thenReturn(categorieEntity);

		// When
		Exception exception = null;
		try {
			categorieService.create(categorie);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Categorie categorie = categorieFactoryForTest.newCategorie();

		CategorieEntity categorieEntity = categorieEntityFactoryForTest.newCategorieEntity();
		when(categorieJpaRepository.findOne(categorie.getId())).thenReturn(categorieEntity);
		
		CategorieEntity categorieEntitySaved = categorieEntityFactoryForTest.newCategorieEntity();
		when(categorieJpaRepository.save(categorieEntity)).thenReturn(categorieEntitySaved);
		
		Categorie categorieSaved = categorieFactoryForTest.newCategorie();
		when(categorieServiceMapper.mapCategorieEntityToCategorie(categorieEntitySaved)).thenReturn(categorieSaved);

		// When
		Categorie categorieResult = categorieService.update(categorie);

		// Then
		verify(categorieServiceMapper).mapCategorieToCategorieEntity(categorie, categorieEntity);
		assertTrue(categorieResult == categorieSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		categorieService.delete(id);

		// Then
		verify(categorieJpaRepository).delete(id);
		
	}

}
